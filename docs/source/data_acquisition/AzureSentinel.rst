Azure Sentinel
==============

Description
-----------

This package contains functionality making calls to Azure Sentinel directly.
These can be used to get data from Azure Sentinel, as well as perform 
configuration and other actions on the Azure Sentinel Workspace

:py:mod:`Azure Sentinel API documentation<msticpy.data.azure_sentinel>`

The first step in using this package is to install the msticpy package.

.. code:: ipython3

    !pip install msticpy --upgrade --user


.. parsed-literal::

    Collecting msticpy
    Building wheels for collected packages: msticpy
      Building wheel for msticpy (setup.py): started
      Building wheel for msticpy (setup.py): finished with status 'done'
    Successfully built msticpy
    Installing collected packages: msticpy
    Successfully installed msticpy-0.3.0


.. code:: ipython3

    #Check we are running Python 3.6
    import sys
    MIN_REQ_PYTHON = (3,6)
    if sys.version_info < MIN_REQ_PYTHON:
        print('Check the Kernel->Change Kernel menu and ensure that Python 3.6')
        print('or later is selected as the active kernel.')
        sys.exit("Python %s.%s or later is required.\n" % MIN_REQ_PYTHON)

    #imports
    from msticpy.data.azure_data import AzureData
    print('Imports Complete')


.. parsed-literal::

    Imports Complete


Instantiating and Connecting with an Azure Data Connector
---------------------------------------------------------

See :py:class:`Azure Sentinel <msticpy.data.azure_data.AzureSentinel>`

In order to connect to the Azure API and retrieve the required data
we need to instantiate an Azure Data Connector and connect to the API.
Authentication to the Azure API is handled via an the azure_auth package.
By default this package will attempt to use a prioritized list of authentication 
options. Available options are:
    * 'env' - This checks for credentials stored as environment variables. If this option is selected valid credentials in msticpyconfig.yaml will be written as environment variable values and used.
    * 'cli' - This attempts to use credentials generated by logging in via the `Azure CLI <https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli>`__on the host running the notebook kernel.
    * 'msi' - This attempts to use an `Azure Managed Identity. <https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview>`__
    * 'interactive' - This prompts the browser to interactively login using the device's browser.
By default `['env', 'cli', 'msi', 'interactive']` is used but you can provide an alternative 
list to `.connect` via the auth_methods parameter.

.. code:: ipython3

        azs = AzureSentinel()
        azs.connect(auth_methods=['cli','interactive'])

Get Azure Subscription Details
------------------------------

See :py:meth:`get_subscriptions <msticpy.data.azure_data.AzureData.get_subscriptions>`

Details of which Azure subscription to access is required before identifying and connecting 
to an Azure Sentinel workspace.

AZURE_SENTINEL_CONNECTOR.list_subscriptions() returns a pandas DataFrame
with details of all the subscriptions within the tenant.

.. code:: ipython3

    az.get_subscriptions()


.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Subscription ID</th>
          <th>Display Name</th>
          <th>State</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>0</td>
          <td>3b701f84-d04b-4479-89b1-fa8827eb537e</td>
          <td>Visual Studio Enterprise</td>
          <td>SubscriptionState.enabled</td>
        </tr>
      </tbody>
    </table>
    </div>
|

Get Azure Sentinel Workspaces
-----------------------------

See :py:meth:`get_sentinel_workspaces <msticpy.data.azure_sentinel.AzureSentinel.get_sentinel_workspaces>`

A list of Azure Sentinel workspaces within a specified subscription. 
Note that this will only return workspaces that the authenticated account 
is permitted to view.

.. code:: ipython3

    azs.get_sentinel_workspaces(sub_id="3b701f84-d04b-4479-89b1-fa8827eb537e")

List Hunting get_hunting_queries
--------------------------------

Return a dataframe detailing all hunting queries configured in the workspace. This allows for 
analysis and configuration of hunting queries, as well as the ability to take a 
hunting query and run it with a QueryProvider. This function requires that you 
pass it the resource ID string of the Azure Sentinel workspace to get the queries 
from. This ID can be obtained with `get_sentinel_workspaces`

See :py:meth:`get_hunting_queries <msticpy.data.azure_sentinel.AzureSentinel.get_hunting_queries>`

.. code:: ipython3

    azs.get_hunting_queries(res_id = "subscriptionId/3b701f84-d04b-4479-89b1-fa8827eb537e/resourceGroup/SentinelRG/workspaceName/SentinelWorkspace")

List Configured Alert Rules 
---------------------------

Return a dataframe detailing all configured alert/analytics rules configured with Azure Sentinel.
This includes scheduled queries, as well as Fusion based detections. The returned dataframe include 
details of the rule configuration as well as the query run (where applicable). As with other functions 
the resource ID of the workspace to get alerts from is requried.

See :py:meth:`get_alert_rules <msticpy.data.azure_sentinel.AzureSentinel.get_alert_rules>`

.. code:: ipython3

    azs.get_alert_rules(res_id = "subscriptionId/3b701f84-d04b-4479-89b1-fa8827eb537e/resourceGroup/SentinelRG/workspaceName/SentinelWorkspace")

List Bookmarks 
--------------

Return a list of all the bookmarks saved in the workspace. This includes details of the bookmark, who 
created it, when and with what details. It also includes query text that can be executed with a 
`QueryProvider` in order to get the details of the bookmark's logs. As with other functions the resource 
ID of the workspace to get alerts from is requried.

See :py:meth:`get_bookmarks <msticpy.data.azure_sentinel.AzureSentinel.get_bookmarks>`

.. code:: ipython3

    azs.get_bookmarks(res_id = "subscriptionId/3b701f84-d04b-4479-89b1-fa8827eb537e/resourceGroup/SentinelRG/workspaceName/SentinelWorspace")
